<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Messaging</title>
  <link rel="stylesheet" href="/resources/css/style.css">
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <div class="container mt-5">
    <h2>Messaging</h2>

    <div class="row">
      <!-- Sidebar for chats -->
      <div class="col-md-4">
        <h4>Chats</h4>
        {{#if chats.length}}
          <ul class="list-group">
            {{#each chats}}
              <li class="list-group-item d-flex align-items-center">
                <a href="#" class="d-flex align-items-center text-decoration-none text-dark flex-grow-1 chat-item" data-chat-id="{{this.chat_id}}">
                  <img src="{{this.profile_picture_path}}" alt="Profile Picture" class="rounded-circle me-3" width="40" height="40">
                  <span>{{this.username}}</span>
                </a>
                <form method="POST" action="/messaging/delete" class="ms-auto">
                  <input type="hidden" name="chatId" value="{{this.chat_id}}">
                  <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                </form>
              </li>
            {{/each}}
          </ul>
        {{else}}
          <p class="no-chats">No chats active</p>
        {{/if}}
      </div>

      <!-- Main chat area -->
      <div class="col-md-8">
        {{#if chatUser}}
          <h4>Chat with {{chatUser.username}}</h4>
          <div id="chatBox" class="chat-box border rounded p-3 mb-3">
            {{> messages messages=messages}}
          </div>
          <form id="messageForm">
            <input type="hidden" name="chatId" value="{{chatId}}">
            <div class="input-group">
              <input type="text" class="form-control" name="message" placeholder="Type a message..." required>
              <button type="submit" class="btn btn-primary">Send</button>
            </div>
          </form>
          <script>
            const socket = io();

            let chatId = "{{chatId}}";

            // Join the current chat room
            if (chatId) {
              socket.emit('joinChat', chatId);
            }

            // Scroll to the bottom of the chat box
            const chatBox = document.getElementById('chatBox');
            chatBox.scrollTop = chatBox.scrollHeight;

            // Listen for new messages
            socket.on('messageReceived', (data) => {
              if (data.chatId === chatId) {
                const messageHtml = `
                  <div class="${data.senderId === {{user.id}} ? 'text-end' : 'text-start'} mb-2">
                    <div class="message-bubble ${data.senderId === {{user.id}} ? 'sender' : 'receiver'}">
                      ${data.content}
                    </div>
                    <small class="text-muted">${data.time}</small>
                  </div>
                `;
                chatBox.innerHTML += messageHtml;
                chatBox.scrollTop = chatBox.scrollHeight;
              }
            });

            // Send a new message
            document.getElementById('messageForm').addEventListener('submit', function (e) {
              e.preventDefault();

              const message = this.message.value;
              socket.emit('newMessage', {
                chatId,
                senderId: {{user.id}},
                content: message,
                time: new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),
              });

              this.reset();
            });

            // Handle chat switching
            document.querySelectorAll('.chat-item').forEach(item => {
              item.addEventListener('click', async function (e) {
                e.preventDefault();

                const newChatId = this.getAttribute('data-chat-id');

                if (newChatId !== chatId) {
                  // Leave the current chat room
                  socket.emit('leaveChat', chatId);

                  // Update the chatId
                  chatId = newChatId;

                  // Update the URL
                  history.pushState(null, '', `/messaging?chatId=${chatId}`);

                  // Join the new chat room
                  socket.emit('joinChat', chatId);

                  // Fetch messages for the new chat
                  const response = await fetch(`/messaging/messages?chatId=${chatId}`);
                  const messagesHtml = await response.text();

                  // Update the chat box with the new messages
                  chatBox.innerHTML = messagesHtml;

                  // Scroll to the bottom of the chat box
                  chatBox.scrollTop = chatBox.scrollHeight;

                  // Update the hidden chatId input in the message form
                  document.querySelector('#messageForm input[name="chatId"]').value = chatId;
                }
              });
            });
          </script>
        {{else}}
        {{/if}}
      </div>
    </div>
  </div>
</body>
</html>